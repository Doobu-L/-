기존 비동기

기존 Java에서 비동기 방식으로 메소드를 구현할 때는 아래와 같이 구현할 수 있었다.

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class GillogAsync {

    static ExecutorService executorService = Executors.newFixedThreadPool(5);

    public void asyncMethod(final String message) throws Exception {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                // do something
            }            
        });
    }
}

java.util.concurrent.ExecutorService을 활용해서 비동기 방식의 method를 정의 할 때마다,

위와 같이 Runnable의 run()을 재구현해야 하는 등 동일한 작업들의 반복이 잦았다.

@Async Annotation을 활용하면 손쉽게 비동기 메소드 작성이 가능하다.

만약 Spring Boot에서 간단히 사용하고 싶다면, 단순히 Application Class에 @EnableAsync Annotation을 추가하고,

@EnableAsync
@SpringBootApplication
public class SpringBootApplication {
    ...
}
비동기로 작동하길 원하는 method 위에 @Async Annotation을 붙여주면 사용할 수 있다.

public class GillogAsync {

    @Async
    public void asyncMethod(final String message) throws Exception {
        ....
    }
}




@Async Annotation을 사용할 때 아래와 같은 세 가지 사항을 주의하자.

private method는 사용 불가, public method만 사용 가능

self-invocation(자가 호출) 불가, 즉 inner method는 사용 불가

QueueCapacity 초과 요청에 대한 비동기 method 호출시 방어 코드 작성
