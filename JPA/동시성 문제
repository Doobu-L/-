동시성 문제는 read/write 작업이 있는 환경에서 항상 고민해야 하는 문제다.
공유된 자원을 여러 세션이 동시에 접근하게 되었을 때 발생하는 문제이다. 읽기는 무분별한 접근도 허용한다.
문제가 되는 건 갱신 시점에 발생하는 갱신손실이다. 

동시성 문제는 완전한 해결이아닌 타협을 통해 해소 할 수 있다. 우리는 두가지 방법을 고민 할 수 있다.
낙관적 락, 비관적 락.

낙관적 락은 버저닝을 통해 읽는 시점에 버전을 매겨, 갱신 시점에 새로운 버전과 데이터를 갱신한다. 읽기 시점에 같은 자원을 읽었더라도, 쓰기시점에서 읽은 시점의 버전과 현재버전이 다르다면
갱신에 실패한다. JPA 에서는 @Version 어노테이션으로 낙관적 락을 사용할 수 있다.
비관적 락은 읽는 시점부터 해당 자원에 락을 걸어버리는 것. 
해당 자원에 @Lock 어노테이션과 LockModeType 을 설정해서 사용할 수 있다. qeury 에서 for update 가 같이 나감으로써 데이터에 lock 을 건다.

낙관적 락은 믿을수없는 재고문제를 해결해 줄 수 있다. 활동성이 높은 장점이있지만, transaction의 원자성을 보존하지 못하는 외부 API의 사용에는 적절하지 못 하다.
비관적 락은 정확성이 중요한 작업에 사용 할 수 있다. 
