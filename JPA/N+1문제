SQL 중심으로 개발하던 Mybatis에 비해 JPA를 사용하면 많은 이점들을 얻을 수 있었다.
Entity위주의 개발은 단순조회를 JPA에서 제공해주는 인터페이스들을 이용해 쿼리메소드로 손쉽게 짤 수 있고, 컬럼을 수정하거나 추가,제거 할 때도 직접 쿼리를 일일이
수정하지 않고 Entity에 필요한 작업만 하면 된다. 많은 강점이 있지만, 쿼리를 자동 생성해주는 JPA는 Entity의 연관관계를 감지해 의도하지않은 쿼리들을 수없이 생성해 낼 수도 있다.
이게 N + 1의 문제이이다.
일대다 관계에서 USER - ACCOUNT 의 관계에서 USER가 가지고 있는 N개의 계좌들을 조회하는 작업을 한다고 생각해보자.
USER를 조회했는데 USER에 연관된 ACCOUNT를 찾기위해 USER와 연관된 ACCOUNT N건에 대해 건건이 조회쿼리를 날린다. 이를 해결하기 위해 N건의 쿼리를 한번에 수행 할 수 있도록
(IN 연산) 해당 연관관계에 @BatchSize 를 지정해 주는 방법이 있다.
다른 방법으로 JPQL을 직접 작성했다면 fetch join 을 사용하는 방법이 있다. @Query("select u from USER u left join fetch ACCOUNT")
JPQL을 작성하기 싫다면 쿼리메소드에 @EntityGraph로 AttributePaths 를 지정해주는 방법이 있다.  @EntityGraph(attributePaths={"ACCOUNT"})

***
주의해야할 점은 batch size에 fetch join을 걸면 안됨.

fetch join이 우선시되어 적용되기 때문에 batch size가 무시되고 fetch join을 인메모리에서 먼저 진행하여 List가 MultipleBagFetchException가 발생하거나,
Set을 사용한 경우에는 Pagination의 인메모리 로딩을 진행.
***

해결하고자하는 상황, 그리고 주어진 정책에 따라 여러가지 의 판단을 할 수 있겠지만, 
지연로딩은 항상 기본으로 깔고 들어가며 Pagination 상황이 가정되지 않는다면 Set 자료구조를 사용해서 MultipleBagFetchException를 
예방하고 Paginatioin이 필수적으로 들어가는 상황이라면 Batch Size를 사용할 것 같다.
